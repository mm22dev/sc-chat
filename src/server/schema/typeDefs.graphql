scalar DateTime

type User {
  id: ID!
  name: String!
}

type AuthPayload {
  token: String
  user: User
}

enum Accessibility {
  PUBLIC
  PRIVATE
}

type Channel {
  id: ID!
  name: String!
  authorId: String!
  accessibility: Accessibility!
  memberList: [User!]!
  createdBy: User!
  createdAt: DateTime!
}

type Message {
  id: ID!
  content: String!
  authorId: String!
  channelId: String!
  writtenBy: User!
  writtenAt: DateTime!
}

type Query {
  listChannels: [Channel!]
  listChannelMessages(channelId: String!): [Message!]
  filterMessages(channelId: String!, author: String, text: String): [Message!]
}

type Mutation {
  signUp(name: String!, email: String!, password: String!): User!
  confirmRegistration(token: String!): User!
  login(email: String!, password: String!): AuthPayload!
  recoverPassword(email: String!): String!
  updateUserAccount(newName: String, newPassword: String, currentPassword: String): User!
  deleteUserAccount(password: String!): User!
  createChannel(channelName: String!): Channel!
  deleteChannel(channelId: String!): Channel!
  setChannelAccessibility(channelId: String, accessibility: Accessibility!): Channel!
  inviteUserToChannel(channelId: String!, email: String!): User!
  kickOutUserFromChannel(channelId: String!, email: String!): User!
  createMessage(channelId: String!, text: String, file: Upload): Message!
  updateOwnMessage(messageId: String!, text: String, file: Upload): Message!
  deleteOwnMessage(messageId: String!): Message!
}
